<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js基础分享</title>
      <link href="/2023/06/08/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/"/>
      <url>/2023/06/08/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h4 id="javascript变量的生命周期"><a href="#javascript变量的生命周期" class="headerlink" title="javascript变量的生命周期"></a>javascript变量的生命周期</h4><p>JavaScript 变量生命周期在它声明时初始化。</p><p>局部变量在函数执行完毕后销毁。</p><p>全局变量在页面关闭后销毁。</p><p>var会污染window变量。</p><h4 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h4><p>由于var定义变量会有变量提升（声明会提升但是不会提升初始化赋值），因此let和const定义变量比较好。</p><p>var支持先使用再赋值。剩余两者必须先声明再使用（很好的习惯）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        console.log(a);</span><br><span class="line">​        var a = &#x27;111&#x27;;</span><br></pre></td></tr></table></figure><p>后台提示undefined。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">            console.log(a);</span><br><span class="line">​            let a = &#x27;111&#x27;;</span><br></pre></td></tr></table></figure><p>后台提示Uncaught ReferenceError: Cannot access ‘a’ before initialization</p><p>下面例子表明先声明再使用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        function sun(a=b,b=3)&#123;&#125;</span><br><span class="line">​        sun();</span><br></pre></td></tr></table></figure><p>后台提示ReferenceError: Cannot access ‘b’ before initialization</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        function sun(a=3,b=a)&#123;&#125;</span><br><span class="line">​        sun();</span><br></pre></td></tr></table></figure><p>此时a&#x3D;b&#x3D;3</p><h4 id="var和let的区别"><a href="#var和let的区别" class="headerlink" title="var和let的区别"></a>var和let的区别</h4><p>全局作用域下var定义的变量会被挂载到window上，let不会被挂载到window上。</p><p>var没块级作用域，let有。</p><p>var可以重复声明（相当于window上的对象进行重新赋值），剩余俩会报错。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> var a = 10; //window.a=10</span><br><span class="line"></span><br><span class="line">​        var a;</span><br><span class="line"></span><br><span class="line">​        console.log(a); //输出10</span><br><span class="line"></span><br><span class="line">​        var a = 20;//window.a=20</span><br><span class="line"></span><br><span class="line">​        console.log(a);//输出20</span><br><span class="line"></span><br><span class="line">​        let b;      //报错Cannot redeclare block-scoped variable &#x27;b&#x27;</span><br><span class="line"></span><br><span class="line">​        let b = 30;</span><br></pre></td></tr></table></figure><p>var的变量提升和let不同，let有暂时性死区，在作用域开始到let之前，虽然变量存在但是无法访问。会提示在初始化之前不能访问该变量。</p><h4 id="const和let关键词的异同"><a href="#const和let关键词的异同" class="headerlink" title="const和let关键词的异同"></a>const和let关键词的异同</h4><ul><li>二者都是块级作用域</li><li>都不能和它所在作用域内的其他变量或函数拥有相同的名称</li><li><code>const</code>声明的常量必须初始化，而<code>let</code>声明的变量不用</li><li>const 定义常量的值不能通过再赋值修改，也不能再次声明。而 let 定义的变量值可以修改。</li></ul><h4 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h4><p>函数体内变量（私有）不会更改函数体外变量。不声明就打印就是往上级函数找变量，输出本作用域的值。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        const a=&#x27;1&#x27;;</span><br><span class="line">​        function show()&#123;</span><br><span class="line">​            const a=&#x27;2&#x27;;</span><br><span class="line">​            function run()&#123;</span><br><span class="line">​                var a=&#x27;3&#x27;;</span><br><span class="line">​                console.log(a);</span><br><span class="line">​            &#125;</span><br><span class="line">​            run();</span><br><span class="line">​            console.log(a);</span><br><span class="line">​        &#125;</span><br><span class="line">​        show();</span><br><span class="line">​        console.log(a);</span><br></pre></td></tr></table></figure><p>后台输出 3 2 1  </p><p>变量声明没有var等关键词会导致全局污染</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a=&#x27;1&#x27;;</span><br><span class="line">function show()&#123;</span><br><span class="line">    const a=&#x27;2&#x27;;</span><br><span class="line">    function run()&#123;</span><br><span class="line">         a=&#x27;3&#x27;;</span><br><span class="line">        console.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    run();</span><br><span class="line">    console.log(a);</span><br><span class="line">&#125;</span><br><span class="line">show();</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure><p>结果就是3 3 3</p><p>var没有块作用域 let有 （多用于循环）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var x = 10;</span><br><span class="line">// 这里输出 x 为 10</span><br><span class="line">&#123; </span><br><span class="line">var x = 2;</span><br><span class="line">// 这里输出 x 为 2</span><br><span class="line">&#125;</span><br><span class="line">// 这里输出 x 为 2</span><br></pre></td></tr></table></figure><p>立即执行函数控制作用域，防止对全局作用域的污染（用let或者const声明）</p><p>const多用于定义常量（在同一个作用域中不能改）引用类型和数组能改。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        const b = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">​        b.value=44;</span><br><span class="line"></span><br><span class="line">​        console.log(b);</span><br></pre></td></tr></table></figure><p>后台会输出{value: 44}</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        const b = 44;</span><br><span class="line"></span><br><span class="line">​        &#123;</span><br><span class="line"></span><br><span class="line">​            const b = 22;</span><br><span class="line"></span><br><span class="line">​            console.log(b);</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        console.log(b);</span><br></pre></td></tr></table></figure><p>输出 22 44 </p><h4 id="变量冻结"><a href="#变量冻结" class="headerlink" title="变量冻结"></a>变量冻结</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        const Host=&#123;</span><br><span class="line"></span><br><span class="line">​            url:&quot;https://bilibili.com&quot;,</span><br><span class="line"></span><br><span class="line">​            port:886</span><br><span class="line"></span><br><span class="line">​        &#125;;</span><br><span class="line"></span><br><span class="line">​        Object.freeze(Host);</span><br><span class="line"></span><br><span class="line">​        Host.port=66;</span><br><span class="line"></span><br><span class="line">​        console.log(Host);</span><br></pre></td></tr></table></figure><p>后台输出{url: ‘<a href="https://bilibili.com/">https://bilibili.com</a>‘, port: 886}</p><p>当 Object.freeze(Host);被注释掉的时候会输出</p><p>{url: ‘<a href="https://bilibili.com/">https://bilibili.com</a>‘, port: 886}</p><p>Object.freeze（）方法可以冻结对象，在之后不可更改对象属性(冻结是浅层冻结)。</p><p>const是声明变量不可更改地址，可以更改地址中的属性。</p><h4 id="null和undefine详细"><a href="#null和undefine详细" class="headerlink" title="null和undefine详细"></a>null和undefine详细</h4><p>对于一个定义了，但未赋值的变量，系统默认其为Undefined类型，且值为undefined<br>但若一个变量连定义都没有，会出现很神奇的一幕，即使用typeof操作符可检测出其类型为undefined，但输出该变量值时会报错。</p><p>一般未指定指向对象的指针会被默认为Null类型，因为一个值为Null的变量其实际类型为object，因为系统会将其视为一个保存对象的变量，只不过还未初始化。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typeof undefined     // undefined</span><br><span class="line">typeof null          // object</span><br><span class="line">null === undefined  // false</span><br><span class="line">null == undefined  // true</span><br></pre></td></tr></table></figure><h4 id="严格模式“use-strict”"><a href="#严格模式“use-strict”" class="headerlink" title="严格模式“use strict”"></a>严格模式“use strict”</h4><p>严格模式作用域和变量基本一致，只对当前作用域和子作用域管用。</p><p>可有可无的错误会在后台报错</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的初学笔记</title>
      <link href="/2023/06/03/%E6%88%91%E7%9A%84%E5%88%9D%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/06/03/%E6%88%91%E7%9A%84%E5%88%9D%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1QU4y1E7qo/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=955be730fc7dede1925e5b4345fd551d">完整实现</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue2 </tag>
            
            <tag> element-ui </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/06/hello-world/"/>
      <url>/2023/05/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexo%E3%80%82js/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>评论</title>
      <link href="/comment/index.html"/>
      <url>/comment/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
