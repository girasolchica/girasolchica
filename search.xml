<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js基础2</title>
      <link href="/2023/06/13/v-if%E4%B8%8Ev-show/"/>
      <url>/2023/06/13/v-if%E4%B8%8Ev-show/</url>
      
        <content type="html"><![CDATA[<h3 id="v-if与v-show"><a href="#v-if与v-show" class="headerlink" title="v-if与v-show"></a>v-if与v-show</h3><p>v-show会把元素css改变（display：none），主用于频繁显示隐藏，（对性能要求高可以用。）</p><p>v-if会把元素变成注释节点，操作dom</p><p>ref和relactive可以把值变成响应式的</p><p>NaN全称是Not a Number就是元素不是数字类型</p><p>NaN与<strong>任何值</strong>相加都会得到NaN</p><p>与任何值都不相等</p><p>isNaN()：<code>会先尝试转换为数字</code>，若无法转换为数字，就返回true，否则返回false</p><p>Number.isNaN():直接检查元素是不是NaN</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">          console.log(NaN===NaN);//false</span><br><span class="line">          </span><br><span class="line">          console.log(isNaN(5));//false</span><br><span class="line"></span><br><span class="line">​            console.log(isNaN(&#x27;5&#x27;));//false</span><br><span class="line"></span><br><span class="line">​            console.log(isNaN(&#x27;apple&#x27;));//true</span><br><span class="line"></span><br><span class="line">​            console.log(Number.isNaN(NaN));//true</span><br><span class="line"></span><br><span class="line">​            console.log(Number.isNaN(5));//false</span><br><span class="line"></span><br><span class="line">​            console.log(Number.isNaN(&#x27;5&#x27;));//false</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符与关键词</title>
      <link href="/2023/06/11/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E5%85%B3%E9%94%AE%E8%AF%8D/"/>
      <url>/2023/06/11/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E5%85%B3%E9%94%AE%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="运算符“-”和“-”异同"><a href="#运算符“-”和“-”异同" class="headerlink" title="运算符“&#x3D;&#x3D;”和“&#x3D;&#x3D;&#x3D;”异同"></a>运算符“&#x3D;&#x3D;”和“&#x3D;&#x3D;&#x3D;”异同</h3><p>“&#x3D;&#x3D;”是比较运算符，计算机可以帮助转换成同类型的进行比较。</p><p>“&#x3D;&#x3D;&#x3D;”（全等于&#x2F;绝对等于）也是比较运算符，但是计算机不会帮助进行类型转换。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        let a=6;    //typeof Number</span><br><span class="line">        let c=&#x27;6&#x27;;  //typeof String</span><br><span class="line"></span><br><span class="line">​        console.log(a==c);  //true</span><br><span class="line"></span><br><span class="line">​        console.log(a === c);   //false</span><br></pre></td></tr></table></figure><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p>首先设置表达式 <em>n</em>（通常是一个变量）。随后表达式的值会与结构中的每个 case 的值做比较。如果存在匹配，则与该 case 关联的代码块会被执行。请使用 <strong>break</strong> 来阻止代码自动地向下一个 case 运行。如果都没有break，那么就会把case语句中都执行然后到default再退出。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        switch (n) &#123;</span><br><span class="line"></span><br><span class="line">​                case 1:</span><br><span class="line"></span><br><span class="line">​        执行代码块 1</span><br><span class="line"></span><br><span class="line">​                    break;</span><br><span class="line"></span><br><span class="line">​                case 2:</span><br><span class="line"></span><br><span class="line">​        执行代码块 2</span><br><span class="line"></span><br><span class="line">​                    break;</span><br><span class="line"></span><br><span class="line">​                default:</span><br><span class="line"></span><br><span class="line">​        与 case 1 和 case 2 不同时执行的代码</span><br><span class="line"></span><br><span class="line">​            &#125;</span><br></pre></td></tr></table></figure><p>while 循环会在指定条件为真时循环执行代码块。</p><p>do&#x2F;while 循环是 while 循环的变体。该循环会在检查条件是否为真之前执行一次代码块，然后如果条件为真的话，就会重复这个循环。该循环至少会执行一次，即使条件为 false 它也会执行一次，因为代码块会在条件被测试前执行。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        function star(row = 5) &#123;</span><br><span class="line"></span><br><span class="line">​            let start = 0;</span><br><span class="line"></span><br><span class="line">​            do &#123;</span><br><span class="line"></span><br><span class="line">​                let n = 0;</span><br><span class="line"></span><br><span class="line">​                do &#123;</span><br><span class="line"></span><br><span class="line">​                    document.write(&#x27;*&#x27;);</span><br><span class="line"></span><br><span class="line">​                &#125; while (++n &lt;= start);</span><br><span class="line"></span><br><span class="line">​                document.write(&quot;&lt;br/&gt;&quot;);</span><br><span class="line"></span><br><span class="line">​            &#125; while (++start &lt;= row);</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        star();</span><br></pre></td></tr></table></figure><p>for循环打印杨辉三角</p><p><img src="/../img/sanjiao.jpg" alt="杨辉三角"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        function sanjiao(row = 5) &#123;</span><br><span class="line"></span><br><span class="line">​            for (let i = 1; i &lt; row; i++) &#123; //控制行数</span><br><span class="line"></span><br><span class="line">​                for (let n = row - i; n &gt; 0; n--) &#123;</span><br><span class="line"></span><br><span class="line">​                    document.write(&quot;^&quot;);//先打印出空白区域</span><br><span class="line"></span><br><span class="line">​                &#125;</span><br><span class="line"></span><br><span class="line">​                for (let m = i * 2 - 1; m &gt; 0; m--) &#123;</span><br><span class="line"></span><br><span class="line">​                    document.write(&quot;*&quot;);</span><br><span class="line"></span><br><span class="line">​                &#125;</span><br><span class="line"></span><br><span class="line">​                document.write(&quot;&lt;br/&gt;&quot;);</span><br><span class="line"></span><br><span class="line">​            &#125;</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        sanjiao(5);</span><br></pre></td></tr></table></figure><h3 id="typeof与instancesof"><a href="#typeof与instancesof" class="headerlink" title="typeof与instancesof"></a>typeof与instancesof</h3><p>instanceof能够详细区分数组属性和对象属性。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr=[];</span><br><span class="line"></span><br><span class="line">​            console.log(typeof arr); //object</span><br><span class="line"></span><br><span class="line">​            let a=&#123;&#125;;</span><br><span class="line"></span><br><span class="line">​            console.log(typeof a);//object</span><br><span class="line"></span><br><span class="line">​            console.log(arr instanceof Array);//判断arr.prototype(原型链上是否有数组属性) 会打印true</span><br><span class="line"></span><br><span class="line">​            console.log(a instanceof Object);//判断a.peototype  true</span><br></pre></td></tr></table></figure><p>\为转义符号，可以更改符号的意义使其正常输出。</p><h3 id="字符串的连接"><a href="#字符串的连接" class="headerlink" title="字符串的连接"></a>字符串的连接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let year=&quot;2008&quot;;</span><br><span class="line">let month=&quot;11&quot;;</span><br><span class="line">let su= `$&#123;year&#125;年$&#123;month&#125;是很难忘的日期`;</span><br><span class="line">console.log(year+&quot;年&quot;+month+&quot;是很难忘的日期&quot;);</span><br><span class="line">console.log(`$&#123;year&#125;年$&#123;month&#125;是很难忘的日期`);</span><br><span class="line">console.log(su);</span><br></pre></td></tr></table></figure><p>输出结果一致，更推荐使用第二种。即使用··进行字符串的连接。</p><h3 id="封装获取日期函数"><a href="#封装获取日期函数" class="headerlink" title="封装获取日期函数"></a>封装获取日期函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const date = new Date();</span><br><span class="line"></span><br><span class="line">function dateFormat(date,format=&quot;YYYY-MM-DD hh:mm:ss&quot;)&#123;</span><br><span class="line">        const config=&#123;</span><br><span class="line">                YYYY:date.getFullYear();</span><br><span class="line">                MM:date.getMonth() + 1;// 月份从0开始，需要加1</span><br><span class="line">                DD:date.getDate();</span><br><span class="line">                hh:date.getHours();</span><br><span class="line">                mm:date.getMinutes();</span><br><span class="line">                ss:date.getSeconds();</span><br><span class="line">        &#125;;</span><br><span class="line">        for(const key in config)&#123;</span><br><span class="line">                format=format.replace(key,config[key]);</span><br><span class="line">        &#125;</span><br><span class="line">        return format;</span><br><span class="line">&#125;</span><br><span class="line">console.log(dateFormat(date,&#x27;YYYY年MM月DD日&#x27;));//后面可以更改格式，否则是上方的默认格式</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础</title>
      <link href="/2023/06/10/js%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/06/10/js%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h4 id="javascript变量的生命周期"><a href="#javascript变量的生命周期" class="headerlink" title="javascript变量的生命周期"></a>javascript变量的生命周期</h4><p>JavaScript 变量生命周期在它声明时初始化。</p><p>局部变量在函数执行完毕后销毁。</p><p>全局变量在页面关闭后销毁。</p><p>var会污染window变量。</p><h4 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h4><p>由于var定义变量会有变量提升（声明会提升但是不会提升初始化赋值），因此let和const定义变量比较好。</p><p>var支持先使用再赋值。剩余两者必须先声明再使用（很好的习惯）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        console.log(a);</span><br><span class="line">​        var a = &#x27;111&#x27;;</span><br></pre></td></tr></table></figure><p>后台提示undefined。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">            console.log(a);</span><br><span class="line">​            let a = &#x27;111&#x27;;</span><br></pre></td></tr></table></figure><p>后台提示Uncaught ReferenceError: Cannot access ‘a’ before initialization</p><p>下面例子表明先声明再使用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        function sun(a=b,b=3)&#123;&#125;</span><br><span class="line">​        sun();</span><br></pre></td></tr></table></figure><p>后台提示ReferenceError: Cannot access ‘b’ before initialization</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        function sun(a=3,b=a)&#123;&#125;</span><br><span class="line">​        sun();</span><br></pre></td></tr></table></figure><p>此时a&#x3D;b&#x3D;3</p><h4 id="var和let的区别"><a href="#var和let的区别" class="headerlink" title="var和let的区别"></a>var和let的区别</h4><p>全局作用域下var定义的变量会被挂载到window上，let不会被挂载到window上。</p><p>var没块级作用域，let有。</p><p>var可以重复声明（相当于window上的对象进行重新赋值），剩余俩会报错。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> var a = 10; //window.a=10</span><br><span class="line"></span><br><span class="line">​        var a;</span><br><span class="line"></span><br><span class="line">​        console.log(a); //输出10</span><br><span class="line"></span><br><span class="line">​        var a = 20;//window.a=20</span><br><span class="line"></span><br><span class="line">​        console.log(a);//输出20</span><br><span class="line"></span><br><span class="line">​        let b;      //报错Cannot redeclare block-scoped variable &#x27;b&#x27;</span><br><span class="line"></span><br><span class="line">​        let b = 30;</span><br></pre></td></tr></table></figure><p>var的变量提升和let不同，let有暂时性死区，在作用域开始到let之前，虽然变量存在但是无法访问。会提示在初始化之前不能访问该变量。</p><h4 id="const和let关键词的异同"><a href="#const和let关键词的异同" class="headerlink" title="const和let关键词的异同"></a>const和let关键词的异同</h4><ul><li><p>二者都是块级作用域</p></li><li><p>都不能和它所在作用域内的其他变量或函数拥有相同的名称</p></li><li><p><code>const</code>声明的常量必须初始化，而<code>let</code>声明的变量不用</p></li><li><p>const 定义常量的值不能通过再赋值修改，也不能再次声明。而 let 定义的变量值可以修改。</p></li></ul><h4 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h4><p>函数体内变量（私有）不会更改函数体外变量。不声明就打印就是往上级函数找变量，输出本作用域的值。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        const a=&#x27;1&#x27;;</span><br><span class="line">​        function show()&#123;</span><br><span class="line">​            const a=&#x27;2&#x27;;</span><br><span class="line">​            function run()&#123;</span><br><span class="line">​                var a=&#x27;3&#x27;;</span><br><span class="line">​                console.log(a);</span><br><span class="line">​            &#125;</span><br><span class="line">​            run();</span><br><span class="line">​            console.log(a);</span><br><span class="line">​        &#125;</span><br><span class="line">​        show();</span><br><span class="line">​        console.log(a);</span><br></pre></td></tr></table></figure><p>后台输出 3 2 1  </p><p>变量声明没有var等关键词会导致全局污染</p><pre><code>    var a=&#39;1&#39;;    function show()&#123;        const a=&#39;2&#39;;        function run()&#123;             a=&#39;3&#39;;            console.log(a);        &#125;        run();        console.log(a);    &#125;    show();    console.log(a);</code></pre><p>结果就是3 3 3</p><p>var没有块作用域 let有 （多用于循环）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var x = 10;</span><br><span class="line">// 这里输出 x 为 10</span><br><span class="line">&#123; </span><br><span class="line">var x = 2;</span><br><span class="line">// 这里输出 x 为 2</span><br><span class="line">&#125;</span><br><span class="line">// 这里输出 x 为 2</span><br></pre></td></tr></table></figure><p>立即执行函数控制作用域，防止对全局作用域的污染（用let或者const声明）</p><p>const多用于定义常量（在同一个作用域中不能改）引用类型和数组能改。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        const b = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">​        b.value=44;</span><br><span class="line"></span><br><span class="line">​        console.log(b);</span><br></pre></td></tr></table></figure><p>后台会输出{value: 44}</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        const b = 44;</span><br><span class="line"></span><br><span class="line">​        &#123;</span><br><span class="line"></span><br><span class="line">​            const b = 22;</span><br><span class="line"></span><br><span class="line">​            console.log(b);</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        console.log(b);</span><br></pre></td></tr></table></figure><p>输出 22 44 </p><h4 id="变量冻结"><a href="#变量冻结" class="headerlink" title="变量冻结"></a>变量冻结</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        const Host=&#123;</span><br><span class="line"></span><br><span class="line">​            url:&quot;https://bilibili.com&quot;,</span><br><span class="line"></span><br><span class="line">​            port:886</span><br><span class="line"></span><br><span class="line">​        &#125;;</span><br><span class="line"></span><br><span class="line">​        Object.freeze(Host);</span><br><span class="line"></span><br><span class="line">​        Host.port=66;</span><br><span class="line"></span><br><span class="line">​        console.log(Host);</span><br></pre></td></tr></table></figure><p>后台输出{url: ‘<a href="https://bilibili.com/">https://bilibili.com</a>‘, port: 886}</p><p>当 Object.freeze(Host);被注释掉的时候会输出</p><p>{url: ‘<a href="https://bilibili.com/">https://bilibili.com</a>‘, port: 886}</p><p>Object.freeze（）方法可以冻结对象，在之后不可更改对象属性(冻结是浅层冻结)。</p><p>const是声明变量不可更改地址，可以更改地址中的属性。</p><h4 id="null和undefine详细"><a href="#null和undefine详细" class="headerlink" title="null和undefine详细"></a>null和undefine详细</h4><p>对于一个定义了，但未赋值的变量，系统默认其为Undefined类型，且值为undefined<br>但若一个变量连定义都没有，会出现很神奇的一幕，即使用typeof操作符可检测出其类型为undefined，但输出该变量值时会报错。</p><p>一般未指定指向对象的指针会被默认为Null类型，因为一个值为Null的变量其实际类型为object，因为系统会将其视为一个保存对象的变量，只不过还未初始化。</p><h4 id="严格模式“use-strict”"><a href="#严格模式“use-strict”" class="headerlink" title="严格模式“use strict”"></a>严格模式“use strict”</h4><p>严格模式作用域和变量基本一致，只对当前作用域和子作用域管用。</p><p>可有可无的错误会在后台报错</p><h4 id="cookie和sessionStorage和localStorage"><a href="#cookie和sessionStorage和localStorage" class="headerlink" title="cookie和sessionStorage和localStorage"></a>cookie和sessionStorage和localStorage</h4><p>cookie保存在浏览器端，session保存在服务器端！</p><table><thead><tr><th>特性</th><th>cookie</th><th>localStorage</th><th>sessionStorage</th></tr></thead><tbody><tr><td>数据生命周期</td><td>一般由服务器生成，可以设置过期时间，如果没有设置过期时间，那么在浏览器关闭时，cookie结束生命周期</td><td>关闭页面或浏览器之后localStorage中的数据也不会消失。localStorage除非主动删除数据，否则数据永远不会消失</td><td>在仅在当前会话下有效，关闭浏览器窗口就会被销毁。</td></tr><tr><td>数据存储大小</td><td>4kb</td><td>5MB</td><td>5MB</td></tr><tr><td>与服务端通信</td><td>保存在客户端，每次请求时都会带上它！</td><td>保存在客户端，不与服务器进行交互通信</td><td>保存在客户端，不与服务器进行交互通信</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门项目-图书管理系统</title>
      <link href="/2023/06/03/%E6%88%91%E7%9A%84%E5%88%9D%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/06/03/%E6%88%91%E7%9A%84%E5%88%9D%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1QU4y1E7qo/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=955be730fc7dede1925e5b4345fd551d">完整实现</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue2 </tag>
            
            <tag> element-ui </tag>
            
            <tag> egg.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/06/hello-world/"/>
      <url>/2023/05/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexo%E3%80%82js/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
